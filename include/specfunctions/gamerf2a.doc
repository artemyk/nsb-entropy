Gamma/Error functions for FORTRAN version 2.0a



使える関数

    ガンマ関数  Gamma(x)=integral_0^infinity t^(x-1)*exp(-t)dt
        gamma(x)   :単精度
        dgamma(x)  :倍精度
        qgamma(x)  :四倍精度

    対数ガンマ関数  log(Gamma(x))
        lgamma(x)  :単精度
        dlgamma(x) :倍精度
        qlgamma(x) :四倍精度

    複素ガンマ関数  Gamma(z)
        cgamma(z)  :単精度
        cdgamma(z) :倍精度
        cqgamma(z) :四倍精度

    複素対数ガンマ関数  log(Gamma(z)) (logは主値-pi<arg log<=piをとる)
        clgamma(z) :単精度
        cdlgamma(z):倍精度
        cqlgamma(z):四倍精度

    補誤差関数  erfc(x)=(2/sqrt(pi))*integral_x^infinity exp(-t^2)dt
        erfc(x)    :単精度
        derfc(x)   :倍精度
        qerfc(x)   :四倍精度

    誤差関数  erf(x)=(2/sqrt(pi))*integral_0^x exp(-t^2)dt
        erf(x)     :単精度
        derf(x)    :倍精度
        qerf(x)    :四倍精度

    複素補誤差関数  erfc(z)
        cerfc(z)   :単精度
        cderfc(z)  :倍精度
        cqerfc(z)  :四倍精度

    複素誤差関数  erf(z)
        cerf(z)    :単精度
        cderf(z)   :倍精度
        cqerf(z)   :四倍精度

    (注)四倍精度は標準FORTRAN77の規格外で
        使用できないことがあります.
        その場合,コメントするか削除するか
        してください.



精度について

    近似式(プログラム中の式)の最大相対誤差は以下のとおりです.
        単精度ガンマ関数        3.5e-08 (0<=x<=infinity)
        単精度複素ガンマ関数    8.0e-09 (0<=Re(z)<=infinity)
        単精度補誤差関数        7.8e-09 (-infinity<=x<=infinity)
        単精度複素補誤差関数    1.6e-08 (0<=Re(z)<=infinity)
        倍精度ガンマ関数        3.7e-18 (0<=x<=infinity)
        倍精度複素ガンマ関数    5.4e-17 (0<=Re(z)<=infinity)
        倍精度補誤差関数        3.7e-17 (-infinity<=x<=infinity)
        倍精度複素補誤差関数    3.0e-17 (0<=Re(z)<=infinity)
        四倍精度ガンマ関数      1.2e-36 (0<=x<=infinity)
        四倍精度複素ガンマ関数  2.5e-36 (0<=Re(z)<=infinity)
        四倍精度補誤差関数      7.5e-36 (-infinity<=x<=infinity)
        四倍精度複素補誤差関数  3.5e-36 (0<=Re(z)<=infinity)


    実際は丸め誤差が入るので
        単精度    6-8桁程度
        倍精度    15-17桁程度
        四倍精度  34-36桁程度
    となります(多少機種依存性がある).



近似式について

    近似は以下の式を最適化したものです.

    Gamma(z)=sqrt(2*pi)*(z+r)^(z-1/2)*exp(-z-r)
             *(a_0
             +a_1*(z-1)/z
             +a_2*(z-1)*(z-2)/z/(z+1)
             +a_3*(z-1)*(z-2)*(z-3)/z/(z+1)/(z+2)
             +...)
    ここでrは正の数,a_nはz=1,2,3,4,...で左辺=右辺と
    なるように定める.すなわち
         a_n= f_n*(2*n)*(2*n-1)*(2*n-2)*...*(n+1)/1/2/3/.../n
             -a_0*(2*n)*(2*n-1)*(2*n-2)*...*(n+1)/1/2/3/.../n
             -a_1*(2*n)*(2*n-1)*(2*n-2)*...*(n+2)/1/2/3/.../(n-1)
             -...
             -a_(n-1)*(2*n)/1
         f_n=1/sqrt(2*pi)*(1*2*3*...*n)*(n+1+r)^(-n-1/2)*exp(n+1+r)

    参考文献
    C.Lanczos,A Precision Approximation of the Gamma Function,
    J.SIAM Numer.Anal.Ser.B,Vol.1,1964

    erfc(z)=f(z)+(2*h/pi)*exp(-z^2)*z
            *(exp(-(1*h/2)^2)/(z^2+(1*h/2)^2)
            +exp(-(3*h/2)^2)/(z^2+(3*h/2)^2))
            +exp(-(5*h/2)^2)/(z^2+(5*h/2)^2)
            +...)
        f(z)=2/(1+exp(2*pi*z/h)) , Re(z)+abs(Im(z))<pi/h
        f(z)=0                   , Re(z)+abs(Im(z))>=pi/h
    または
    erfc(z)=g(z)+(2*h/pi)*exp(-z^2)*z
            *(1/(2*z^2)
            +exp(-(1*h)^2)/(z^2+(1*h)^2)
            +exp(-(2*h)^2)/(z^2+(2*h)^2)
            +exp(-(3*h)^2)/(z^2+(3*h)^2)
            +...)
        g(z)=2/(1-exp(2*pi*z/h)) , Re(z)+abs(Im(z))<pi/h
        g(z)=0                   , Re(z)+abs(Im(z))>=pi/h

    参考文献
    M.Mori,A Method for Evaluation of the Error Function
    of Real and Complex Variable with High Relative Accuracy,
    Publ.RIMS,Kyoto Univ.vol.19,1983


    最適化の概略

    最適化は次のような二段構成になっています.

    ---最適化の種を作る---
    A1.変数変換 t=1/(z+const.) を行い,引数の領域をz>=0
       またはRe(z)>=0から有限領域に変換する.
    A2.有理関数近似部の分子を実近似はChebyshev級数展開,
       複素近似はTaylor級数展開により近似する.
    A3.さらに分母および他の近似パラメタの自由度分だけ
       級数展開の誤差の主要項の成分をゼロにする(Newton法を使う).

    これでかなりよい近似が得られます.

    ---最適化を徹底する---
    B1.z>=0上またはRe(z)>=0の境界上での相対誤差の
       曲線を描かせ,近似の全パラメタの個数+1回の振動
       (無限遠点も含めて数える)があることを確認する.
    B2.その振動の振幅がすべて同じ大きさになるように近似
       パラメタを修正する.
       具体的には次のプロセスを繰り返す.
       B2.1:振動の山と谷の場所を調べる.
       B2.2:その点での値の絶対値が一定になるようにする.

    この場合,単なる多項式近似とは異なり初等超越関数を
    含む有理関数の近似なので最良近似が得られるという
    保証は何もありません(実際,収束しなかったり
    local minimum に落ちたりする).
    しかしうまく初期値を選べば最良と思われる近似が
    得られます.
    これでA3で得られた近似より1-2桁ぐらい精度を
    稼ぐことができます.

    (注)複素補誤差関数に関しては最適化は行っていません.



高速化について

    除算速度が乗算速度に比べて倍以上遅い場合は近似式を
    通分した方が速くなります.この場合大きい引数に対する
    オーバーフローに注意する必要があります.

    場合分けが遅い計算機で引数の範囲があらかじめわかって
    いる場合はif文を省略できます.



近似式の変形について

    近似式は桁落ちが起きないような形になっているので
    下手に変形すると精度が悪くなることがあります.

    例えばガンマ関数の近似で
    ((...(Pn/(x+Qn)+...P1)/(x+Q1)+P0)/x+Pr
    という式を誤差関数のように
    An/(x+Qn)+...+A1/(x+Q1)+A0/x+Pr
    という形に変形した場合
    Anの符号が交互に変化し激しい桁落ちが発生します.

    除算の回数を減らす場合の多項式/多項式とする
    変形は問題はないと思います.



1993,1995/3 by T.Ooura
